#!/usr/bin/env python3

import argparse, socket, time, json, random

BROADCAST = 'FFFF'

class Replica:
    def __init__(self, port, id, others):
        self.port = port
        self.id = id
        self.others = others

        self.state = "FOLLOWER"
        self.voted = False
        self.votes = 0
        self.leader = BROADCAST
        self.data = {}
        self.heartbeatTime = time.time()
        self.generateNewTimeout()

        self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.socket.bind(('localhost', 0))

        print("Replica %s starting up" % self.id, flush=True)
        hello = { "src": self.id, "dst": BROADCAST, "leader": BROADCAST, "type": "hello" }
        self.send(hello)
        print("Sent hello message: %s" % hello, flush=True)

    # Generate a random timeout between 150 and 300 ms
    def generateNewTimeout(self):
        self.heartbeatTimeOut = random.randint(150,300) / 1000

    # Process a message received from the network
    def useMessage(self, msg):
        if msg["type"] == "RequestVote":
            if not self.voted:
                self.send({ "src": self.id, "dst": msg["src"], "leader": msg["src"], "type": "Vote"})
                self.voted = True
        if msg["type"] == "Vote":
            self.processReceiveVote(msg)
        if msg["type"] == 'AppendEntries':
            self.processAppendEntries(msg)
        if msg["type"] == 'put':
            self.processPut(msg)
        if msg["type"] == 'get':
            self.processGet(msg)

    # Sends a message to the network
    def send(self, message):
        self.socket.sendto(json.dumps(message).encode('utf-8'), ('localhost', self.port))

    # Starts the election by first setting itself as a candidate
    def startElection(self):
        self.state = "CANDIDATE"
        self.heartbeatTime=time.time()
        self.generateNewTimeout()
        if not self.voted:  
            self.votes = self.votes + 1
            self.voted = True
        self.send({ "src": self.id, "dst": BROADCAST, "leader": BROADCAST, "type": "RequestVote"})
    
    # Process the vote message from the network
    def processReceiveVote(self, msg):
        if self.state == "CANDIDATE":
            self.votes = self.votes + 1

        if self.votes > ((len(self.others) // 2) + 1): 
            self.state = "LEADER"
            self.voted = False
            self.leader = self.id
            self.sendAppendEntries()
            self.heartbeatTime = time.time()
    
    # processes the Append Entries message from the network
    def processAppendEntries(self, msg):
        if self.state != "LEADER":
            self.leader = msg["src"]
            self.state = "FOLLOWER"
            self.voted = False
            self.votes = 0
            self.heartbeatTime=time.time()
            self.data.update(msg["data"])

    # Processes a put message from the network
    def processPut(self, msg):
        if self.state == "LEADER": 
            temp = msg["value"]
            if temp == None:
                self.send({"src": self.id, "dst": msg["src"], "leader": self.leader, "type": "fail", "MID": msg["MID"]})
            else:
                self.data[msg["key"]] = msg["value"]
                self.send({"src": self.id, "dst": msg["src"], "leader": self.leader, "type": "ok", "MID": msg["MID"]})
        else: 
            self.send({"src": self.id, "dst": msg["src"], "leader": self.leader, "type": "redirect", "MID": msg["MID"]})

    # Processes a get message from the network
    def processGet(self, msg):
        if self.state == "LEADER": 
            temp = self.data.get(msg["key"])
            if temp == None:
                self.send({"src": self.id, "dst": msg["src"], "leader": self.leader, "type": "fail", "MID": msg["MID"]})
            else:
                self.send({"src": self.id, "dst": msg["src"], "leader": self.leader, "type": "ok", "MID": msg["MID"], "value": temp})
        else: 
            self.send({"src": self.id, "dst": msg["src"], "leader": self.leader, "type": "redirect", "MID": msg["MID"]})

    # Sends a heartbeat message to all other replicas
    def sendAppendEntries(self):
        self.heartbeatTime=time.time()
        self.send({ "src": self.id, "dst": BROADCAST, "leader": self.id, "type": "AppendEntries", "data": self.data})

    def run(self):
        while True:
            if self.state == "LEADER" and time.time() - self.heartbeatTime >= .08:
                self.sendAppendEntries()
            if time.time() - self.heartbeatTime >= self.heartbeatTimeOut:
                if (self.state == "FOLLOWER") and not self.voted:
                    self.startElection()
                if(self.state == "CANDIDATE"):
                    self.startElection()
            data, addr = self.socket.recvfrom(65535)
            msg = data.decode('utf-8')
            self.useMessage(json.loads(msg))
            # print("Received message '%s'" % (msg,), flush=True)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='run a key-value store')
    parser.add_argument('port', type=int, help="Port number to communicate")
    parser.add_argument('id', type=str, help="ID of this replica")
    parser.add_argument('others', metavar='others', type=str, nargs='+', help="IDs of other replicas")
    args = parser.parse_args()
    replica = Replica(args.port, args.id, args.others)
    replica.run()