#!/usr/bin/env python3

import socket
import json
from random import randint
import ssl
import argparse

class WordleSolver:
    
    def __init__(self):
        # Arguments for the command line
        self.parser = argparse.ArgumentParser()
        self.parser.add_argument("-p", '--port', help="TCP port that the server is listening on")
        self.parser.add_argument("-s", action="store_true", help="Uses a TLS encrypted socket connection")
        self.parser.add_argument("hostname", help="Name of the server")
        self.parser.add_argument("Northeastern-username", help="Northeastern Username")
        
        # Reads arguments from command line
        self.args = self.parser.parse_args()
        self.neu = getattr(self.args, 'Northeastern-username')
        self.hostname = self.args.hostname
        self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.id = ""
        
        # If both -p and -s are closed, then port = 27993
        # If only -s is opened, port = 27994
        # If only -p is opened, port = user input
        # if both are opened, port = user input
        if not self.args.port:
            if self.args.s:
                self.port = 27994
            else:
                self.port = 27993
        else:
            self.port = int(self.args.port)
            
        self.wordlist = open('project1-words.txt', 'r').read().split()
        self.socket.connect((self.hostname, self.port))
        if self.args.s:
            context = ssl.SSLContext(ssl.PROTOCOL_TLSv1_2)
            self.socket = context.wrap_socket(self.socket, server_hostname=self.hostname)
        
    # method for sending the hello line
    def sendHello(self):
        input = {"type": "hello", "northeastern_username": self.neu}
        parsedData = self.sendGuess(input)
        self.id = parsedData["id"]
        
    # method for sending the guesses to the server
    def sendGuess(self, input):
        data = json.dumps(input) + "\n"
        self.socket.sendall(data.encode())
        output = self.socket.recv(1024).decode()
        return json.loads(output)

    # function used to filter out the wordlist depending on the answerkey
    # the answer key is the array given when guessing a word ie [0, 1, 0, 1, 2]
    def filter(self, guess, answerKey):
        for pos, key in enumerate (answerKey):
            if key == 2:
                for word in self.wordlist[:]:
                    if word[pos] != guess[pos]:
                        self.wordlist.remove(word)        
            elif key == 1:
                for word in self.wordlist[:]:
                    if (not guess[pos] in word) or (guess[pos] == word[pos]):
                        self.wordlist.remove(word)
            elif key == 0:
                for word in self.wordlist[:]:
                    if (guess[pos] in word):
                        seen = False
                        for p, letter in enumerate(guess):
                            if (guess[pos] == letter) and (pos != p) and (answerKey[p] != 0):
                                seen = True
                        if not seen:
                            self.wordlist.remove(word)
        return self.wordlist

    # function for running the the wordle solver
    def run(self):
        # using the "best" wordle starter to reduce the wordlist
        self.sendHello()
        guess = "salet"
        parsedData = self.sendGuess({"type": "guess", "id": self.id, "word": guess})
        answerKey = parsedData["guesses"][-1]["marks"]
        self.wordlist = self.filter(guess, answerKey)
        
        # repeatedly sends guesses and filters out the wordlist until there is the final word
        while True:
            if len(self.wordlist) > 0:
                guess = self.wordlist[randint(0, len(self.wordlist) - 1)]
                parsedData = self.sendGuess({"type": "guess", "id": self.id,  "word": guess})
                if parsedData["type"] == "bye":
                    break
                answerKey = parsedData["guesses"][-1]["marks"]
                self.wordlist = self.filter(guess, answerKey)
            else:
                break
        print(parsedData['flag'])
        self.socket.close()

# main method
if __name__ == "__main__":
    wordle = WordleSolver()
    wordle.run()
    
    