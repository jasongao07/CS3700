#!/usr/bin/env python3

import argparse, socket, time, json, select, struct, sys, math, hashlib

class Receiver:
    def __init__(self):
        self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.socket.bind(('0.0.0.0', 0))
        self.port = self.socket.getsockname()[1]
        self.log("Bound to port %d" % self.port)

        self.remote_host = None
        self.remote_port = None

        self.sequence_number = 0
        self.acks = {}
        self.acks_to_delete = []
        
    def send(self, message):
        self.socket.sendto(json.dumps(message).encode('utf-8'), (self.remote_host, self.remote_port))

    def log(self, message):
        sys.stderr.write(message + "\n")
        sys.stderr.flush()

    def run(self):
        while True:
            socks = select.select([self.socket], [], [])[0]
            for conn in socks:
                data, addr = conn.recvfrom(65535)

                # Grab the remote host/port if we don't already have it
                if self.remote_host is None:
                    self.remote_host = addr[0]
                    self.remote_port = addr[1]

                try:
                    msg = json.loads(data.decode('utf-8'))
                    
                    # checks if the corrupt tag is the same as the message's data
                    if msg["corrupt"] == hashlib.md5(msg["data"].encode('utf-8')).hexdigest():
                        if msg['seq'] not in self.acks.keys():
                            self.acks[msg['seq']] = msg

                        # Always send back an ack
                        self.send({"type": "ack", "seq": msg["seq"], "time": msg["time"], "corrupt": msg["corrupt"]})

                        self.acks = {k: v for k, v in sorted(self.acks.items())}

                        # goes through each entry and delete them if they have a matching sequence number
                        for k, v in self.acks.items():
                            if k == self.sequence_number:
                                self.log("Received message %s" % msg)
                                # Print out the data to stdout 
                                print(v["data"], end='', flush=True)

                                self.sequence_number += 1
                                self.acks_to_delete.append(k)
                       
                        
                        # ACKs that are deleted 
                        for deleteAcks in self.acks_to_delete:
                            del self.acks[deleteAcks]
                        self.acks_to_delete.clear()
            
                except:
                    continue

        return

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='receive data')
    args = parser.parse_args()
    sender = Receiver()
    sender.run()
